
import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Checkbox } from '@/components/ui/checkbox';
import { Separator } from '@/components/ui/separator';
import { useToast } from '@/hooks/use-toast';
import { Zap, FileSpreadsheet } from 'lucide-react';

interface VBARequirementsFormProps {
  onRequirementsChange: (requirements: any) => void;
  onCodeGenerated: (code: string) => void;
}

const VBARequirementsForm = ({ onRequirementsChange, onCodeGenerated }: VBARequirementsFormProps) => {
  const { toast } = useToast();
  const [isGenerating, setIsGenerating] = useState(false);
  const [requirements, setRequirements] = useState({
    projectName: '',
    description: '',
    sourceRange: '',
    targetRange: '',
    transformations: [],
    formatting: [],
    errorHandling: true,
    optimization: true,
  });

  const transformationOptions = [
    'UCase - Convert to uppercase',
    'LCase - Convert to lowercase',
    'Trim - Remove extra spaces',
    'Date formatting',
    'Number formatting',
    'Text concatenation',
    'Mathematical calculations',
    'Conditional logic',
  ];

  const formattingOptions = [
    'Bold text',
    'Currency format',
    'Date format',
    'Number format',
    'Cell borders',
    'Background colors',
    'Text alignment',
    'Auto-fit columns',
  ];

  const handleInputChange = (field: string, value: any) => {
    const updated = { ...requirements, [field]: value };
    setRequirements(updated);
    onRequirementsChange(updated);
  };

  const handleArrayChange = (field: string, value: string, checked: boolean) => {
    const currentArray = requirements[field] || [];
    const updated = {
      ...requirements,
      [field]: checked 
        ? [...currentArray, value]
        : currentArray.filter(item => item !== value)
    };
    setRequirements(updated);
    onRequirementsChange(updated);
  };

  const generateVBACode = async () => {
    setIsGenerating(true);
    
    try {
      // Simulate AI code generation
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      const generatedCode = `Sub ${requirements.projectName || 'AutoGeneratedMacro'}()
    '
    ' ${requirements.description || 'Auto-generated VBA macro'}
    ' Generated by Absolute-0.AI VBA Generator
    '
    
    Dim sourceRange As Range
    Dim targetRange As Range
    Dim cell As Range
    
    ' Error handling
    On Error GoTo ErrorHandler
    
    ' Set source and target ranges
    Set sourceRange = Range("${requirements.sourceRange || 'A1:A10'}")
    Set targetRange = Range("${requirements.targetRange || 'B1:B10'}")
    
    ' Process each cell in the source range
    For Each cell In sourceRange
        If Not IsEmpty(cell.Value) Then
            ${requirements.transformations.includes('UCase - Convert to uppercase') ? 
              'targetRange.Cells(cell.Row - sourceRange.Row + 1, 1).Value = UCase(cell.Value)' :
              'targetRange.Cells(cell.Row - sourceRange.Row + 1, 1).Value = cell.Value'
            }
        End If
    Next cell
    
    ${requirements.formatting.includes('Bold text') ? 
      '    \' Apply formatting\n    targetRange.Font.Bold = True' : ''
    }
    ${requirements.formatting.includes('Currency format') ? 
      '    targetRange.NumberFormat = "$#,##0.00"' : ''
    }
    ${requirements.formatting.includes('Auto-fit columns') ? 
      '    targetRange.Columns.AutoFit' : ''
    }
    
    MsgBox "Macro completed successfully!", vbInformation
    Exit Sub
    
ErrorHandler:
    MsgBox "An error occurred: " & Err.Description, vbCritical
End Sub`;

      onCodeGenerated(generatedCode);
      toast({
        title: "VBA Code Generated",
        description: "Your Excel macro has been generated successfully!",
      });
    } catch (error) {
      toast({
        title: "Generation Failed",
        description: "Failed to generate VBA code. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsGenerating(false);
    }
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <FileSpreadsheet className="h-5 w-5" />
          VBA Requirements
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-6">
        <div className="space-y-4">
          <div>
            <Label htmlFor="projectName">Project Name</Label>
            <Input
              id="projectName"
              placeholder="e.g., DataProcessor"
              value={requirements.projectName}
              onChange={(e) => handleInputChange('projectName', e.target.value)}
            />
          </div>

          <div>
            <Label htmlFor="description">Description</Label>
            <Textarea
              id="description"
              placeholder="Describe what your macro should do..."
              value={requirements.description}
              onChange={(e) => handleInputChange('description', e.target.value)}
            />
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div>
              <Label htmlFor="sourceRange">Source Range</Label>
              <Input
                id="sourceRange"
                placeholder="e.g., A1:A100"
                value={requirements.sourceRange}
                onChange={(e) => handleInputChange('sourceRange', e.target.value)}
              />
            </div>
            <div>
              <Label htmlFor="targetRange">Target Range</Label>
              <Input
                id="targetRange"
                placeholder="e.g., B1:B100"
                value={requirements.targetRange}
                onChange={(e) => handleInputChange('targetRange', e.target.value)}
              />
            </div>
          </div>
        </div>

        <Separator />

        <div>
          <Label className="text-base font-medium">Data Transformations</Label>
          <div className="mt-2 space-y-2">
            {transformationOptions.map((option) => (
              <div key={option} className="flex items-center space-x-2">
                <Checkbox
                  id={option}
                  checked={requirements.transformations.includes(option)}
                  onCheckedChange={(checked) => handleArrayChange('transformations', option, checked)}
                />
                <Label htmlFor={option} className="text-sm">{option}</Label>
              </div>
            ))}
          </div>
        </div>

        <Separator />

        <div>
          <Label className="text-base font-medium">Formatting Options</Label>
          <div className="mt-2 space-y-2">
            {formattingOptions.map((option) => (
              <div key={option} className="flex items-center space-x-2">
                <Checkbox
                  id={option}
                  checked={requirements.formatting.includes(option)}
                  onCheckedChange={(checked) => handleArrayChange('formatting', option, checked)}
                />
                <Label htmlFor={option} className="text-sm">{option}</Label>
              </div>
            ))}
          </div>
        </div>

        <Separator />

        <div className="space-y-2">
          <div className="flex items-center space-x-2">
            <Checkbox
              id="errorHandling"
              checked={requirements.errorHandling}
              onCheckedChange={(checked) => handleInputChange('errorHandling', checked)}
            />
            <Label htmlFor="errorHandling">Include error handling</Label>
          </div>
          <div className="flex items-center space-x-2">
            <Checkbox
              id="optimization"
              checked={requirements.optimization}
              onCheckedChange={(checked) => handleInputChange('optimization', checked)}
            />
            <Label htmlFor="optimization">Code optimization</Label>
          </div>
        </div>

        <Button 
          onClick={generateVBACode}
          disabled={isGenerating || !requirements.projectName}
          className="w-full"
        >
          <Zap className="h-4 w-4 mr-2" />
          {isGenerating ? 'Generating...' : 'Generate VBA Code'}
        </Button>
      </CardContent>
    </Card>
  );
};

export default VBARequirementsForm;
